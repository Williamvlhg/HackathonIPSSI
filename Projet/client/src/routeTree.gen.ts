/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProfileImport } from './routes/profile'
import { Route as LoginImport } from './routes/login'
import { Route as EmployesImport } from './routes/employes'
import { Route as CalendarImport } from './routes/calendar'
import { Route as IndexImport } from './routes/index'
import { Route as ChantierIndexImport } from './routes/chantier/index'
import { Route as ChantierSiteIdImport } from './routes/chantier/$siteId'

// Create/Update Routes

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const EmployesRoute = EmployesImport.update({
  id: '/employes',
  path: '/employes',
  getParentRoute: () => rootRoute,
} as any)

const CalendarRoute = CalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ChantierIndexRoute = ChantierIndexImport.update({
  id: '/chantier/',
  path: '/chantier/',
  getParentRoute: () => rootRoute,
} as any)

const ChantierSiteIdRoute = ChantierSiteIdImport.update({
  id: '/chantier/$siteId',
  path: '/chantier/$siteId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarImport
      parentRoute: typeof rootRoute
    }
    '/employes': {
      id: '/employes'
      path: '/employes'
      fullPath: '/employes'
      preLoaderRoute: typeof EmployesImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/chantier/$siteId': {
      id: '/chantier/$siteId'
      path: '/chantier/$siteId'
      fullPath: '/chantier/$siteId'
      preLoaderRoute: typeof ChantierSiteIdImport
      parentRoute: typeof rootRoute
    }
    '/chantier/': {
      id: '/chantier/'
      path: '/chantier'
      fullPath: '/chantier'
      preLoaderRoute: typeof ChantierIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/employes': typeof EmployesRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/chantier/$siteId': typeof ChantierSiteIdRoute
  '/chantier': typeof ChantierIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/employes': typeof EmployesRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/chantier/$siteId': typeof ChantierSiteIdRoute
  '/chantier': typeof ChantierIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/employes': typeof EmployesRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/chantier/$siteId': typeof ChantierSiteIdRoute
  '/chantier/': typeof ChantierIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/employes'
    | '/login'
    | '/profile'
    | '/chantier/$siteId'
    | '/chantier'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/employes'
    | '/login'
    | '/profile'
    | '/chantier/$siteId'
    | '/chantier'
  id:
    | '__root__'
    | '/'
    | '/calendar'
    | '/employes'
    | '/login'
    | '/profile'
    | '/chantier/$siteId'
    | '/chantier/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarRoute: typeof CalendarRoute
  EmployesRoute: typeof EmployesRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  ChantierSiteIdRoute: typeof ChantierSiteIdRoute
  ChantierIndexRoute: typeof ChantierIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarRoute: CalendarRoute,
  EmployesRoute: EmployesRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  ChantierSiteIdRoute: ChantierSiteIdRoute,
  ChantierIndexRoute: ChantierIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/calendar",
        "/employes",
        "/login",
        "/profile",
        "/chantier/$siteId",
        "/chantier/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/calendar": {
      "filePath": "calendar.tsx"
    },
    "/employes": {
      "filePath": "employes.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/chantier/$siteId": {
      "filePath": "chantier/$siteId.tsx"
    },
    "/chantier/": {
      "filePath": "chantier/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
