generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  label String

  // Un même role peut être attribué à plusieurs utilisateurs
  User User[]
}

model User {
  id Int @id @default(autoincrement())

  firstName String
  lastName  String
  email     String
  password  String

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  // Worker peut être null au cas ou si le user à le role RH par exemple
  worker   Worker? @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId Int?
}

// Worker est un user qui travail dans un chantier
model Worker {
  id Int @id @default(autoincrement())

  // relation one to one => UN user est peut être UN worker
  user User[]

  /**
   * Un worker à un ou plusieurs skills
   * relation one to many
   */
  skills Skill[]

  // le worker peut travailler sur plusieurs sites
  sites Site[] @relation("WorkerSites")
}

model Skill {
  id    Int    @id @default(autoincrement())
  label String

  // Relation many-to-one avec Worker : un Skill peut être associé à un Worker
  worker   Worker? @relation(fields: [workerId], references: [id])
  workerId Int?

  skills Site[] @relation("WorkerSkills")
}

model Site {
  id Int @id @default(autoincrement())

  name      String
  address   String
  startDate String
  endDate   String

  // plusieurs workers sur un site
  workers Worker[] @relation("WorkerSites")

  // plusieurs skills
  skills Skill[] @relation("WorkerSkills")
}
